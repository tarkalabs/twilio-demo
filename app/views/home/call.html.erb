
<div id="twilioToken" data-token="<%= @twilio_token %>"></div>

<button id="caller" class="call" onclick="call();" data-caller="<%= @from_phone_number%>">Call</button>
<button id="hangup" class="hangup" onclick="hangup();">Hangup</button>

<input type="text" id="phoneNumber" placeholder="Enter a phone number to call"/>

<div id="log">Loading...</div>

<script type="text/javascript" src="//static.twilio.com/libs/twiliojs/1.2/twilio.min.js"></script>

<script type="text/javascript">
  /* Create the Client with a Capability Token */
  // Twilio.Device.setup("<%= @twilio_token %>", {debug: true});
  (function(){
    ttoken = '<%= @twilio_token %>';
    app_error = '<%= @error %>';
    console.log(ttoken);
    if(ttoken == '') {
      $("#log").text(app_error);
    } else {
      /*
       * There is no need to instantiate Twilio.Device yourself, but you do need to invoke .setup() before using it.
       */
      Twilio.Device.setup(ttoken, {debug: true});
      log("Go make your call..");
    }
  })();

  /* Let us know when the client is ready.
   * This is initially triggered when all operations in .setup() have completed and
   * the device is ready and online. It may be triggered again if the device goes offline and comes back online
   * (i.e. the connection drops and returns).
   */
  Twilio.Device.ready(function (device) {
    log("READY: Ready to make calls..");
  });

  /* This is triggered when the connection to Twilio drops or the device's capability token is invalid/expired.
   * In either of these scenarios, the device cannot receive incoming connections or make outgoing connections.
   * If the token expires during an active connection the offline event handler will be called, but the connection
   * will not be terminated. In this situation you will have to call Twilio.Device.setup() with a valid token before
   * attempting or receiving the next connection.
   */
  Twilio.Device.offline(function (device) {
    log("OFFLINE: Oops!..the connection got dropped.");
  });

  /* Report any errors on the screen */
  Twilio.Device.error(function (error) {
      log("ERROR: " + error.code + '::' + error.message);
  });

  Twilio.Device.connect(function (conn) {
      log("CONNECT: Successfully established call");
  });

  /* Log a message when a call disconnects. */
  Twilio.Device.disconnect(function (conn) {
      log("DISCONNECT: Call ended");
  });

  Twilio.Device.presence(function (presenceEvent) {
    log("PRESENCE: ");
    // Called for each available client when this device becomes ready
    // and every time another client's availability changes.
    // https://www.twilio.com/blog/2011/09/twilio-client-presence-for-everyone.html
    karthik = presenceEvent;
    presenceEvent.from // => name of client whose availability changed
    presenceEvent.available // => true or false
  });

  function has_validation_problem() {
    if( $('#phoneNumber').val().trim() == "" ) {
      log("Phone Number cannot be empty!");
      return true;
    };
  }

  /* Connect to Twilio when we call this function. */
  function call() {
    if(has_validation_problem()) return;
    diableCalling();
    $("#log").text("Checking authorization..");
    var req = $.ajax({
      url: '/call',
      dataType: 'json',
    });
    var success = function( resp ) {
      setupTwilio(resp.twilio_token).done(function() {
        // get the phone number to connect the call to
        var params = {"ToPhoneNumber": $("#phoneNumber").val(),
                  "FromPhoneNumber": $('#caller').attr('data-caller')};
        Twilio.Device.connect(params);
      });
    };
    var err = function( req, status, err ) {
      var error = JSON.parse(req.responseText)['error'] || err; //$.parseJSON can be used alternatively??
      $("#log").text(error);
      enableCalling();
    };
    req.then( success, err );
  }

  function setupTwilio(ttoken) {
    var deferred = $.Deferred();
    $('#twilioToken').attr('data-token', ttoken);
    Twilio.Device.setup(ttoken, {debug: true});
    var id = setInterval(function() {
      if(isReady()) {
        deferred.resolve();
        clearInterval(id);
      }
    }, 100);
    return deferred.promise();
  }

  /* Returns the active connection object.
   * Connection objects can be used to perform operations on the connection like mute, unmute, sending DTMF digits, etc.
   */
  function activeConnection() {
    return Twilio.Device.activeConnection();
  }

  function status() {
    return Twilio.Device.status();
  }

  function isReady() {
    return status() == "ready";
  }

  function isNotReady() {
    return !isReady();
  }

  /* A function to end a connection to Twilio. */
  function hangup() {
    log("Disconnecting the call..");
    Twilio.Device.disconnectAll();
    enableCalling();
  }

  function enableCalling() {
    $('caller').removeAttr('disabled');
    $('phoneNumber').removeAttr('disabled');
  }

  function diableCalling() {
    $('caller').attr('disabled','disabled');
    $('phoneNumber').attr('disabled','disabled');
  }

  function log(txt) {
    $("#log").text(txt);
    console.log(txt);
  }

</script>
